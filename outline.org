* Ready, Set, Clojure!
** Introduction
*** Why Clojure?
*** What are we going to cover?
**** Some of the Clojure basics
**** Clojure's built in test framework (clojure.test)
**** Java interop
**** Polymorphism
**** Macros
**** Contrib libraries
**** Leiningen
*** Surely a Clojure adapter for Redis already exists!
**** List current implementations
** Getting Started
*** A little housekeeping
**** Bootstrapping the environment
#+begin_src sh
  $ lein new yow
  $ cd yow
  $ mkdir script
  $ touch script/bootstrap
  $ chmod +x script/bootstrap
#+end_src

#+begin_src sh
  REDIS_VERSION=2.6.4
  URL=http://redis.googlecode.com/files/$REDIS_VERSION.tar.gz
  
  if [ ! -d "vendor" ]; then
      mkdir vendor
      pushd vendor
      if which wget > /dev/null; then
          wget $URL
      else
          curl -O $URL
      fi
      tar xvf $REDIS_VERSION.tar.gz
      pushd $REDIS_VERSION
      make
      popd
      popd
  fi
#+end_src

#+begin_src sh
  if [ ! -d "config" ]; then
      mkdir config
      cp vendor/$REDIS_VERSION/redis.conf config/
  fi
  
  if [ ! -d "bin" ]; then
      mkdir bin
      cp vendor/$REDIS_VERSION/src/redis-server bin/
      cp vendor/$REDIS_VERSION/src/redis-cli bin/
  fi
#+end_src

#+begin_src fundamental
  $ tree
  |-- README.md
  |-- bin
  |   |-- redis-cli
  |   `-- redis-server
  |-- config
  |   `-- redis.conf
  |-- project.clj
  |-- script
  |   |-- bootstrap
  |-- src
  |   `-- yow
  |       `-- core.clj
  |-- test
  |   `-- yow
  |       `-- core_test.clj
  `-- vendor
      `-- redis-2.6.4
#+end_src

**** What you will need
**** Explain the unified protocol
*** An introduction to clojure.test
#+begin_src clojure
  (defn hello
    [name]
    (str "Hello " name "!"))
  
  (deftest test-hello
    (is (= "Hello Yow!" (hello "Yow"))))
#+end_src
*** Turning the example from the docs into a test
#+begin_src clojure
  (deftest test-command
    (testing "Produces a well formed command string"
      (is (= "*3\r\n$3\r\nSET\r\n$5\r\nmykey\r\n$7\r\nmyvalue\r\n"
             (command "set" "mykey" "myvalue")))))
#+end_src
*** Implementation
#+begin_src clojure
  (def crlf "\r\n")
  
  (defn command
    [name & args]
    (str "*"
         (inc (count args)) crlf
         "$" (count name) crlf
         (str/upper-case name) crlf
         (str/join crlf
                   (map (fn [x] (str "$" (count x) crlf x)) args))
         crlf))
#+end_src

#+begin_src fundamental
  Testing yow.core-test
  
  Ran 1 tests containing 1 assertions.
  0 failures, 0 errors.
#+end_src
** Hello Redis!
*** A brief explanation of Java interop in Clojure
#+begin_src clojure
  user> (import '(java.net Socket))
  ;-> java.net.Socket
  user> (Socket.)
  ;-> #<Socket Socket[unconnected]>
  user> (Socket. "localhost" 6379)
  ;-> #<Socket Socket[addr=localhost/127.0.0.1,port=6379,localport=45284]>
  user> (def s (Socket. "localhost" 6379))
  ;-> #'user/s
  user> (.setKeepAlive s true)
  ;-> nil
  user> (.getKeepAlive s)
  ;-> true
#+end_src
*** Using the Java socket API and the protocol implementation to communicate with Redis
#+begin_src clojure
  (defn- socket
    []
    (doto (Socket. "localhost" 6379)
      (.setTcpNoDelay true)
      (.setKeepAlive true)))
#+end_src

#+begin_src clojure
  (defn request
    [query]
    (with-open [socket (socket)
                in (DataInputStream.
                    (BufferedInputStream.
                     (.getInputStream socket)))
                out (.getOutputStream socket)]
      (.write out (.getBytes (apply str query)))
      (println in)))
#+end_src

#+begin_src clojure
  user> (request (command "set" "foo" "bar"))
  ;-> #<DataInputStream java.io.DataInputStream@580a00fd>
#+end_src

#+begin_src sh
  $ bin/redis-cli get foo
  "bar"
#+end_src
** Speaking the same language
*** We can write to Redis, but we aren't able to understand the response yet
*** Runtime Polymorphism in Clojure
**** 3 Levels of Support
***** Most of the core datastructures are implemented using Java interfaces
***** Supports generation of interfaces via proxy
***** Multimethods (arbitrary dispatch)
*** An introduction to multimethods
#+begin_src clojure
  (defmulti encounter
    (fn [x y]
      [(:Species x) (:Species y)]))
  
  (defmethod encounter [:Bunny :Lion] [b l]  :run-away)
  (defmethod encounter [:Lion :Bunny] [b l]  :eat)
  (defmethod encounter [:Lion :Lion] [b l]   :fight)
  (defmethod encounter [:Bunny :Bunny] [b l] :mate)
#+end_src

#+begin_src clojure
  (def b1 {:Species :Bunny :other :stuff})
  (def b2 {:Species :Bunny :other :stuff})
  (def l1 {:Species :Lion :other :stuff})
  (def l2 {:Species :Lion :other :stuff})
  
  (encounter b1 b2)
  ;-> :mate
  (encounter b1 l1)
  ;-> :run-away
  (encounter l1 b1)
  ;-> :eat
  (encounter l1 l2)
  ;-> :fight
#+end_src
*** Reading the response
**** The Rules
#+begin_src fundamental
  Redis will reply to commands with different kinds of replies. It is
  possible to check the kind of reply from the first byte sent by the
  server:
  
  With a single line reply the first byte of the reply will be "+"
  With an error message the first byte of the reply will be    "-"
  With an integer number the first byte of the reply will be   ":"
  With bulk reply the first byte of the reply will be          "$"
  With multi-bulk reply the first byte of the reply will be    "*"
#+end_src
**** Defining our response multimethod
#+begin_src clojure
  (defmulti response
    (fn [in] (char (.readByte in))))
  
  (defmethod response \- [in]
    (.readLine in))
  
  (defmethod response \+ [in]
    (.readLine in))
  
  (defmethod response \: [in]
    (Long/parseLong (.readLine in)))
  
  (defmethod response \$ [in]
    (.readLine in)
    (.readLine in))
  
  (defmethod response \* [in]
    (throw (UnsupportedOperationException. "Not Yet Implemented")))
#+end_src

#+begin_src clojure
  user> (request (command "set" "foo" "bar"))
  ;-> "OK"
  
  user> (request (command "get" "foo"))
  ;-> "bar"
#+end_src
*** Validating our assumptions with a few more tests
#+begin_src clojure
  ;; Examples taken from http://try.redis-db.com/
  (deftest test-basic-interaction
    (testing "SET then GET"
      (is (= "OK" (request (command "set" "server:name" "fido"))))
      (is (= "fido" (request (command "get" "server:name")))))
    (testing "INCR"
      (request (command "set" "connections" "10"))
      (is (= 11 (request (command "incr" "connections")))))
    (testing "DEL"
      (is (= 1 (request (command "del" "connections"))))))
#+end_src

#+begin_src fundamental
  Testing yow.core-test
  
  Ran 2 tests containing 5 assertions.
  0 failures, 0 errors.
#+end_src

** A mountain to climb
*** Exploring the Redis commands
#+begin_src clojure
  (ns yow.commands
    (:use [clojure.data.json :only (read-str)]))
  
  (defn fetch-redis-commands
    []
    (map first
     (read-str
      (slurp "https://raw.github.com/antirez/redis-doc/master/commands.json"))))
#+end_src

#+begin_src fundamental
  ZREM ZREMRANGEBYRANK PUNSUBSCRIBE BRPOP BITCOUNT SET PEXPIREAT FLUSHDB
  BGSAVE ZRANGE SLOWLOG SCARD HDEL HSETNX STRLEN CONFIG SET HEXISTS
  SMOVE SUNIONSTORE ZINCRBY CONFIG RESETSTAT LINSERT BRPOPLPUSH ECHO
  PSETEX LPOP SMEMBERS LPUSH ZRANK LINDEX RPOPLPUSH DECRBY
  ZREVRANGEBYSCORE BLPOP ZADD SREM GETRANGE RENAMENX AUTH HINCRBYFLOAT
  SINTER SDIFFSTORE LLEN MGET SUBSCRIBE ZCARD SETBIT MIGRATE INCRBY DEL
  GETSET SETNX DEBUG OBJECT TTL RPUSH ZUNIONSTORE RPUSHX HLEN TIME LREM
  INFO SLAVEOF HGET RESTORE LTRIM SADD BITOP WATCH PUBLISH PEXPIRE QUIT
  SCRIPT FLUSH DECR EVALSHA HMGET LRANGE EXEC SCRIPT EXISTS INCRBYFLOAT
  UNSUBSCRIBE BGREWRITEAOF MOVE PING EXPIREAT SRANDMEMBER LPUSHX HGETALL
  LASTSAVE SCRIPT KILL HINCRBY CLIENT KILL CLIENT LIST INCR ZREVRANGE
  PERSIST KEYS DUMP SETEX ZCOUNT MSET ZREVRANK LSET UNWATCH SHUTDOWN GET
  SISMEMBER GETBIT CONFIG GET SINTERSTORE ZRANGEBYSCORE ZSCORE SDIFF
  MULTI MONITOR HVALS DEBUG SEGFAULT PSUBSCRIBE HSET APPEND TYPE
  SETRANGE SYNC SCRIPT LOAD EXISTS EVAL SELECT SUNION HKEYS RANDOMKEY
  PTTL FLUSHALL HMSET SAVE DISCARD SPOP SORT ZREMRANGEBYSCORE RENAME
  RPOP EXPIRE ZINTERSTORE MSETNX DBSIZE OBJECT
#+end_src
*** There are 144 commands in Redis 2.6.4
#+begin_src clojure
  user> (count (fetch-redis-commands))
  ;-> 144
#+end_src
*** There are only a handful of ideas behind all of them
#+begin_src javascript
  "BITOP": {
      "summary": "Perform bitwise operations between strings",
      "complexity": "O(N)",
      "arguments": [
          {
              "name": "operation",
              "type": "string"
          },
          {
              "name": "destkey",
              "type": "key"
          },
          {
              "name": "key",
              "type": "key",
              "multiple": true
          }
      ],
      "since": "2.6.0",
      "group": "string"
  },
#+end_src
*** Do we write and maintain 144 functions?
**** Hell no, we abstract!
*** An introduction to macros in Clojure
**** The first rule of macro club
#+begin_src clojure
  ;; source http://clojuredocs.org/clojure_core/clojure.core/defmacro
  (defmacro unless [pred a b]
    `(if (not ~pred) ~a ~b))
  
  ;; usage:
  
  (unless false (println "Will print") (println "Will not print"))
#+end_src

#+begin_src clojure
  user> (macroexpand-1 '(unless false (println "Will print") (println "Will not print")))
  ;; (if (clojure.core/not false)
  ;;   (println "Will print")
  ;;   (println "Will not print"))
#+end_src
*** Defining a language for describing command functions
#+begin_src clojure
  (defcommands
    (set  [key value])
    (get  [key])
    (incr [key])
    (del  [key & keys]))
#+end_src
*** Writing the macros that pull it all together
#+begin_src clojure
  (defn parameters
    [params]
    (let [[args varargs] (split-with #(not= '& %)  params)]
      (conj (vec args) (last varargs))))
  
  (defmacro defcommand
    [name params]
    (let [com (str name)
          p (parameters params)]
      `(defn ~name ~params
         (apply command ~com ~@p))))
#+end_src

#+begin_src clojure
  user> (macroexpand-1 '(defcommand set [key value]))
  ;; (clojure.core/defn set
  ;;   [key value]
  ;;   (clojure.core/apply
  ;;    yow.core/command "set" key value nil))
  
  user> (macroexpand-1 '(defcommand del [key & keys]))
  ;; (clojure.core/defn del
  ;;   [key & keys]
  ;;   (clojure.core/apply
  ;;    yow.core/command "del" key keys))
#+end_src

#+begin_src clojure
  (defmacro defqueries
    [& queries]
    `(do ~@(map (fn [q] `(defquery ~@q)) queries)))
  
  user> (macroexpand-1
         '(defcommands (set [set value]) (del [key & keys])))
  ;; (do
  ;;   (yow.core/defcommand set [set value])
  ;;   (yow.core/defcommand del [key & keys]))
  user> (clojure.walk/macroexpand-all
         '(defcommands (set [set value]) (del [key & keys])))
  ;; (do
  ;;   (def set
  ;;     (fn* ([set value]
  ;;             (clojure.core/apply yow.core/command "set" set value nil))))
  ;;   (def del
  ;;     (fn* ([key & keys]
  ;;             (clojure.core/apply yow.core/command "del" key keys)))))
#+end_src
** Keeping track of the commands
*** How do we keep track of everything?
*** Programatically extracting all of the commands
**** https://raw.github.com/antirez/redis-doc/master/commands.json
#+begin_src clojure
#+end_src
*** Writing the commands file
*** Not all commands created equal
** Wrapping up
*** Packaging and distribution
*** Recap on what we built
*** Where to go from here
*** References
